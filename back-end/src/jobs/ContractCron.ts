import { ContractStatus } from "@src/common/constants";
import Contract from "@src/models/mongoose/Contract";
import HousingAreaRepo from "@src/repos/HousingAreaRepo";
import RoomRepo from "@src/repos/RoomRepo";
import TransactionRepo from "@src/repos/TransactionRepo";
import ContractService from "@src/services/ContractService";
import {
  sendContractAboutToExpireMail,
  sendContractAboutToExpireToLandlord,
  sendExpiredContractMail,
  sendExtendedMail,
} from "@src/services/email/emailService";
import UserService from "@src/services/UserService";
import logger from "jet-logger";
import cron from "node-cron";

export const setExpiredContracts = () => {
  // Runs every day at 2:00 AM
  cron.schedule("0 2 * * *", async () => {
    logger.info("üìÜ [CRON] Checking for expired rental contracts...");

    const now = new Date();

    try {
      // Find contracts that are still active but have passed their end date
      const expiredContracts = await Contract.find({
        status: ContractStatus.active,
        end_date: { $lt: now },
      });

      for (const contract of expiredContracts) {
        const tenant = await UserService.getUserById(contract.tenant_id);
        const owner = await UserService.getUserById(contract.owner_id);
        const getRoom = await RoomRepo.findById(contract.room_id);
        if (!getRoom) {
          logger.err(`‚ùå Kh√¥ng t√¨m th·∫•y ph√≤ng v·ªõi ID ${contract.room_id}`);
          continue;
        }
        const getHousingArea = await HousingAreaRepo.findOneById(
          getRoom?.housing_area_id?.toString(),
        );

        if (ContractService.isContractPendingLegit(contract)) {
          const pending = contract.pending_updates;
          if (pending?.new_end_date) {
            contract.end_date = new Date(pending.new_end_date);
            contract.status = ContractStatus.active;
            contract.pending_updates = undefined;
            await contract.save();
            await sendExtendedMail(
              tenant.email,
              tenant.name ?? "ng∆∞·ªùi d√πng",
              getRoom?.room_number ?? "kh√¥ng x√°c ƒë·ªãnh",
              getHousingArea?.name ?? "Kh√¥ng r√µ",
              new Date(pending.new_end_date),
            );
            await sendExtendedMail(
              owner.email,
              owner.name ?? "ng∆∞·ªùi d√πng",
              getRoom?.room_number ?? "kh√¥ng x√°c ƒë·ªãnh",
              getHousingArea?.name ?? "Kh√¥ng r√µ",
              new Date(pending.new_end_date),
            );
            continue;
          }
        }
        await ContractService.updateContractExpired(contract.id);
        const transaction = await TransactionRepo.findByContractId(contract.id);
        logger.info(
          `üîç Found expired contract ${contract.id} with transaction ${transaction?.id}.`,
        );
        // Refund the deposit if it was paid
        if (transaction) {
          try {
            await ContractService.refundDeposit(transaction);
            logger.info(
              `‚úÖ Refunded deposit for contract ${contract.id} successfully.`,
            );
          } catch (error) {
            logger.err("‚ùå Failed to refund deposit:" + error);
          }
        }
        await sendExpiredContractMail(
          tenant.email,
          tenant.name ?? "ng∆∞·ªùi d√πng",
          getRoom?.room_number ?? "kh√¥ng x√°c ƒë·ªãnh",
          getHousingArea?.name ?? "Kh√¥ng r√µ",
          contract.end_date,
        );
        await sendExpiredContractMail(
          owner.email,
          owner.name ?? "ng∆∞·ªùi d√πng",
          getRoom?.room_number ?? "kh√¥ng x√°c ƒë·ªãnh",
          getHousingArea?.name ?? "Kh√¥ng r√µ",
          contract.end_date,
        );
      }

      logger.info(
        `‚úÖ Processed ${expiredContracts.length} expired rental contracts.`,
      );
    } catch (error) {
      logger.err("‚ùå Failed to process expired rental contracts:" + error);
    }
  });
};

export const notifyExpiringContracts = () => {
  // Ch·∫°y l√∫c 8h s√°ng m·ªói ng√†y
  cron.schedule("*0 8 * * *", async () => {
    logger.info("üìÜ [CRON] Ki·ªÉm tra h·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n...");

    try {
      const now = new Date();

      // C√°c m·ªëc th·ªùi gian c·∫ßn ki·ªÉm tra
      const daysBeforeList = [7, 3, 1];

      for (const daysBefore of daysBeforeList) {
        // T√≠nh ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c c·ªßa targetDate (theo UTC)
        const targetDate = new Date(
          Date.UTC(
            now.getUTCFullYear(),
            now.getUTCMonth(),
            now.getUTCDate() + daysBefore,
            0,
            0,
            0,
            0,
          ),
        );
        const endOfTargetDate = new Date(
          Date.UTC(
            now.getUTCFullYear(),
            now.getUTCMonth(),
            now.getUTCDate() + daysBefore,
            23,
            59,
            59,
            999,
          ),
        );

        const contracts = await Contract.find({
          status: ContractStatus.active,
          end_date: {
            $gte: targetDate,
            $lte: endOfTargetDate,
          },
        });

        logger.info(
          `üîî T√¨m th·∫•y ${contracts.length} h·ª£p ƒë·ªìng h·∫øt h·∫°n sau ${daysBefore} ng√†y.`,
        );

        for (const contract of contracts) {
          if (ContractService.isContractPendingLegit(contract)) {
            logger.info(`üîç B·ªè qua h·ª£p ƒë·ªìng ${contract.id} v√¨ ƒë√£ gia h·∫°n`);
            continue;
          }
          const tenant = await UserService.getUserById(contract.tenant_id);
          const owner = await UserService.getUserById(contract.owner_id);
          const getRoom = await RoomRepo.findById(contract.room_id);
          if (!getRoom) {
            logger.err(`‚ùå Kh√¥ng t√¨m th·∫•y ph√≤ng v·ªõi ID ${contract.room_id}`);
            continue;
          }
          const getHousingArea = await HousingAreaRepo.findOneById(
            getRoom?.housing_area_id?.toString(),
          );

          // G·ª≠i cho tenant
          if (tenant?.email) {
            try {
              await sendContractAboutToExpireMail(
                tenant.email,
                tenant.name ?? "ng∆∞·ªùi d√πng",
                getRoom?.room_number ?? "kh√¥ng x√°c ƒë·ªãnh",
                getHousingArea?.name ?? "Kh√¥ng r√µ",
                contract.end_date,
              );
            } catch (err) {
              logger.err(`‚ùå L·ªói g·ª≠i mail cho tenant ${tenant.email}:`, err);
            }
          }

          // G·ª≠i cho owner
          if (owner?.email) {
            try {
              await sendContractAboutToExpireToLandlord(
                owner.email,
                owner.name ?? "ng∆∞·ªùi d√πng",
                getRoom?.room_number ?? "kh√¥ng x√°c ƒë·ªãnh",
                getHousingArea?.name ?? "Kh√¥ng r√µ",
                contract.end_date,
              );
            } catch (err) {
              logger.err(`‚ùå L·ªói g·ª≠i mail cho tenant ${tenant.email}:`, err);
            }
          }
        }
      }
    } catch (error) {
      logger.err("‚ùå L·ªói khi ki·ªÉm tra h·ª£p ƒë·ªìng h·∫øt h·∫°n:", error);
    }
  });
};
